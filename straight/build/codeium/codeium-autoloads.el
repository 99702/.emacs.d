;;; codeium-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:



;;; Generated autoloads from codeium.el

(defvar cl-struct-codeium-state-tags)
(eval-and-compile (cl-defsubst codeium-state-p (cl-x) (declare (side-effect-free error-free) (pure t)) (and (memq (type-of cl-x) cl-struct-codeium-state-tags) t)) (define-symbol-prop 'codeium-state 'cl-deftype-satisfies 'codeium-state-p))
(cl-defsubst codeium-state-name (cl-x) "\
Access slot \"name\" of `codeium-state' struct CL-X." (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 1)))
(cl-defsubst codeium-state-config (cl-x) "\
Access slot \"config\" of `codeium-state' struct CL-X.
state-wise config, access it with `codeium-config'" (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 2)))
(cl-defsubst codeium-state-proc (cl-x) "\
Access slot \"proc\" of `codeium-state' struct CL-X.
created on a `codeium-init', not created if one specifies `codeium-port'" (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 3)))
(cl-defsubst codeium-state-manager-directory (cl-x) "\
Access slot \"manager-directory\" of `codeium-state' struct CL-X.
directory which codeium local language server places temp files; created by `codeium-default-command'" (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 4)))
(cl-defsubst codeium-state-port (cl-x) "\
Access slot \"port\" of `codeium-state' struct CL-X.
port used by codeium local language server; by default a random port is used.
If you set `codeium-port', it will be used instead and no process will be created" (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 5)))
(cl-defsubst codeium-state-port-ready-hook (cl-x) "\
Access slot \"port-ready-hook\" of `codeium-state' struct CL-X.
hook called when the server is ready; use `codeium-on-port-ready' to add to it" (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 6)))
(cl-defsubst codeium-state-alive-tracker (cl-x) "\
Access slot \"alive-tracker\" of `codeium-state' struct CL-X.
a symbol, set to nil on a codeium-reset which ensures that requests on timers made before the request are dropped" (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 7)))
(cl-defsubst codeium-state-last-auth-token (cl-x) "\
Access slot \"last-auth-token\" of `codeium-state' struct CL-X." (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 8)))
(cl-defsubst codeium-state-last-api-key (cl-x) "\
Access slot \"last-api-key\" of `codeium-state' struct CL-X." (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 9)))
(cl-defsubst codeium-state-last-request-id (cl-x) "\
Access slot \"last-request-id\" of `codeium-state' struct CL-X." (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 10)))
(cl-defsubst codeium-state-results-table (cl-x) "\
Access slot \"results-table\" of `codeium-state' struct CL-X." (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 11)))
(cl-defsubst codeium-state-pending-table (cl-x) "\
Access slot \"pending-table\" of `codeium-state' struct CL-X." (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 12)))
(cl-defsubst codeium-state-make (&cl-defs (nil (cl-tag-slot) (name "") (config nil :documentation "state-wise config, access it with `codeium-config'") (proc nil :documentation "created on a `codeium-init', not created if one specifies `codeium-port'") (manager-directory nil :documentation "directory which codeium local language server places temp files; created by `codeium-default-command'") (port nil :documentation "port used by codeium local language server; by default a random port is used.\nIf you set `codeium-port', it will be used instead and no process will be created") (port-ready-hook nil :documentation "hook called when the server is ready; use `codeium-on-port-ready' to add to it") (alive-tracker nil :documentation "a symbol, set to nil on a codeium-reset which ensures that requests on timers made before the request are dropped") (last-auth-token) (last-api-key) (last-request-id 0) (results-table (make-hash-table :test 'eql :weakness nil)) (pending-table (make-hash-table :test 'eql :weakness nil))) &key name config proc manager-directory port port-ready-hook alive-tracker last-auth-token last-api-key last-request-id results-table pending-table) "\
Constructor for objects of type `codeium-state'." (declare (side-effect-free t)) (record 'codeium-state name config proc manager-directory port port-ready-hook alive-tracker last-auth-token last-api-key last-request-id results-table pending-table))
(autoload 'codeium-config "codeium" "\


(fn FIELD &optional STATE)")
(gv-define-setter codeium-config (val field &optional state) `(codeium--set-config ,val ,field ,state))
(autoload 'codeium-install "codeium" "\


(fn &optional STATE NOCONFIRM)" t)
(autoload 'codeium-init "codeium" "\


(fn &optional STATE)" t)
(autoload 'codeium-completion-at-point "codeium" "\


(fn &optional STATE)")
(register-definition-prefixes "codeium" '("codeium-"))

;;; End of scraped data

(provide 'codeium-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; codeium-autoloads.el ends here
